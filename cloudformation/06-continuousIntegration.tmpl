{% raw %}
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  RepoOwner:
    Type: String
  RepoName:
    Type: String
  RepoBranchName:
    Type: String
  NotificationEmail:
    Type: String
Resources:
  pipelinerole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - "-pipelinerole"
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: pipeline-policy
          PolicyDocument:
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource: '*'
                Effect: Allow
              - Action:
                  - s3:PutObject
                Resource:
                  - arn:aws:s3:::codepipeline*
                  - arn:aws:s3:::elasticbeanstalk*
                Effect: Allow
              - Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: '*'
                Effect: Allow
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                  - iam:PassRole
                  - dynamodb:*
                  - iam:*
                  - s3:*
                Resource: '*'
                Effect: Allow
              - Action:
                  - lambda:*
                Resource: '*'
                Effect: Allow
              - Action:
                  - opsworks:CreateDeployment
                  - opsworks:DescribeApps
                  - opsworks:DescribeCommands
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeStacks
                  - opsworks:UpdateApp
                  - opsworks:UpdateStack
                Resource: '*'
                Effect: Allow
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - iam:PassRole
                Resource: '*'
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'
                Effect: Allow
              - Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: '*'
              - Effect: Allow
                Action:
                  - kms:CreateKey
                Resource: '*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetRandomPassword
                  - secretsmanager:CreateSecret
                  - secretsmanager:DeleteSecret
                  - secretsmanager:TagResource
                  - secretsmanager:GetSecretValue
                Resource: '*'
            Version: 2012-10-17
  CodePipelineCloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-CloudFormation-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "cloudformation.amazonaws.com"
                }
            }]
        }
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-CloudFormation-${AWS::Region}
          PolicyDocument: !Sub |
            {
                "Statement": [{
                        "Effect": "Allow",
                        "Action": [ "*" ],
                        "Resource": "*"
                }]
            }

  codebuildrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - "-cloudbuildrole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuild
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource:
                  - !Join [ '', [ 'arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/codebuild/', !Ref "AWS::StackName"] ]
                  - !Join [ '', [ 'arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/codebuild/', !Ref "AWS::StackName",':*'] ]
                  - !Join [ '', [ 'arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/codebuild/', !Ref "AWS::StackName",'2'] ]
                  - !Join [ '', [ 'arn:aws:logs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':log-group:/aws/codebuild/', !Ref "AWS::StackName",'2',':*'] ]
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Effect: Allow
                Resource:
                  - !GetAtt [s3bucketPipeline, Arn]
                  - !Join ['', [!GetAtt [s3bucketPipeline, Arn], '*']]
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: !Join ['', ['arn:aws:ssm:', !Ref 'AWS::Region', ":", !Ref 'AWS::AccountId', ":parameter/CodeBuild/*"]]
{% endraw %}

  codebuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.6.5
        Type: LINUX_CONTAINER
      Name: !Ref "AWS::StackName"
      ServiceRole: !Ref codebuildrole
      Source:
        BuildSpec:
            Fn::Join:
                - ""
                - - |
                         version: 0.2
                         artifacts:
                           files:
                             - '**/*'
                         phases:
                           build:
                             commands:
                               - pip install -r src/requirements.txt -t src/modules
                  -  Fn::Sub:
                        "\n      - aws cloudformation package --template-file cloudformation/overstack.yaml --s3-bucket ${s3bucketPipeline} --output-template-file cloudformation/overstack.packaged.yaml"
        Type: CODEPIPELINE
{% raw %}
  pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref "AWS::StackName"
      RoleArn: !GetAtt [pipelinerole, Arn]
      ArtifactStore:
        Type: S3
        Location: !Ref s3bucketPipeline
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              RunOrder: 1
              Configuration:
                Branch: !Ref RepoBranchName
                Owner: !Ref RepoOwner
                PollForSourceChanges: 'false'
                Repo: !Ref RepoName
                OAuthToken: !Join ['', ['{{resolve:secretsmanager:', GithubSecret, ':SecretString:oauth_key}}' ]]
              OutputArtifacts:
                - Name: MyApp
              InputArtifacts: []
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              RunOrder: 1
              Configuration:
                ProjectName: !Ref codebuild
              OutputArtifacts:
                - Name: MyAppBuild
              InputArtifacts:
                - Name: MyApp
        - Name: Deploy-Stacks
          Actions:
{% endraw %}

            - Name: DeployApplication-Overstack
              RunOrder: {{ loop.index + 1 }}
              InputArtifacts:
                - Name: MyAppBuild
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: A-OverStack
                TemplatePath: "MyAppBuild::cloudformation/overstack.packaged.yaml"
                TemplateConfiguration: "MyAppBuild::cloudformation/overstack.packaged.yaml.cfg"
                RoleArn: !GetAtt [pipelinerole, Arn]
                Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
{% raw %}
  s3bucketPipeline:
    Type: AWS::S3::Bucket
  pipelinetopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: email
      DisplayName: !Ref AWS::StackName
      TopicName: !Ref AWS::StackName
  buildeventmonitor:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - "CodePipeline Pipeline Execution State Change"
        detail:
          pipeline:
            - !Ref pipeline
      Targets:
        - Arn: !Ref pipelinetopic
          Id: !Ref "AWS::StackName"
      Name:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - "-notificationmonitor"
  pipelinetopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Id: AWSAccountTopicAccess
        Statement:
          - Sid: TrustCWEToPublishEventsToMyTopic
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref pipelinetopic
      Topics:
        - !Ref pipelinetopic
  githubwebhook:
    Type: "AWS::CodePipeline::Webhook"
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Join ['', ['{{resolve:secretsmanager:', GithubSecret, ':SecretString:oauth_key}}' ]]
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref pipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt [pipeline, Version]
      RegisterWithThirdParty: True
{% endraw %}

Outputs:
  PipelineRoleArn:
    Value: !GetAtt "pipelinerole.Arn"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-PipelineRoleArn"